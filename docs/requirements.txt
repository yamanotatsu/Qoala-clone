# 🏛️ SESマッチングプラットフォーム「Qoala Clone」MVP要件定義書

## 📋 MVPスコープ・制約条件

### **プロジェクト方針**
- **シンプル第一**: 複雑な機能は後回しにし、コア機能の品質を最優先
- **AI活用**: メール解析にAI（LLM）を全面採用し、高精度な自動化を実現
- **単一ユーザー**: 営業担当者1名での利用を想定（権限管理なし）
- **大量データ対応**: 1日数百〜数千件のメール処理に対応

### **対象外機能（将来拡張予定）**
- 複数ユーザー・権限管理
- 承認フロー・ワークフロー
- 監査ログ・操作履歴
- 複数Gmailアカウント連携
- 分析ダッシュボード・レポート機能

---

## 🏛️ A. 設計

### MVP機能要件定義

**目的 (Goal):** MVPで実装する機能と実装しない機能を明確に定義し、開発範囲を限定する。

**具体的な作業内容 (Specific Activities):**

◦ **コア機能の定義:**
  - Gmail連携によるメール自動取得
  - AI解析による案件・人材情報の自動抽出
  - ルールベースマッチングエンジン
  - 手動データ修正・承認機能

◦ **除外機能の明確化:**
  - ユーザー管理・権限制御
  - 承認ワークフロー
  - 詳細な分析・レポート機能
  - Microsoft Office連携

**成果物 (Deliverables):** MVP機能要件定義書、除外機能一覧。

### UI/UXワイヤーフレーム作成

**目的 (Goal):** シンプルで直感的な単一ユーザー向けインターfaces設計。

**具体的な作業内容 (Specific Activities):**

◦ **メイン画面構成:**
  - ダッシュボード（概要・統計）
  - 案件一覧・詳細画面
  - 人材一覧・詳細画面
  - マッチング結果表示画面
  - データ修正・承認画面
  - Gmail連携設定画面

◦ **ユーザーフローの簡素化:** 最短3クリックでマッチング結果が見られる設計

**成果物 (Deliverables):** 主要画面のワイヤーフレーム、ユーザーフロー図。

### DB設計

**目的 (Goal):** AI解析結果とマッチングデータを効率的に保存する構造設計。

**具体的な作業内容 (Specific Activities):**

◦ **主要テーブル設計:**
  - `emails` - 取得メール情報
  - `projects` - 案件情報
  - `engineers` - 人材情報
  - `matches` - マッチング結果
  - `users` - ユーザー情報（シンプル）

◦ **AI解析結果格納:** JSON形式での柔軟なデータ保存対応

**成果物 (Deliverables):** ER図、テーブル定義書、インデックス設計。

### インフラ構成設計

**目的 (Goal):** Vercel + Next.jsを中心としたシンプルなインフラ構成。

**具体的な作業内容 (Specific Activities):**

◦ **推奨構成:**
  - **ホスティング:** Vercel
  - **データベース:** Vercel Postgres または Supabase
  - **キャッシュ:** Redis（Upstash）
  - **AI API:** OpenAI GPT-4 または Google Gemini

◦ **スケーラビリティ:** 大量メール処理対応のキューイングシステム

**成果物 (Deliverables):** インフラ構成図、使用サービス一覧。

### API設計

**目的 (Goal):** Next.js API Routesを活用したフルスタック統合API。

**具体的な作業内容 (Specific Activities):**

◦ **主要エンドポイント:**
  - `/api/auth/*` - NextAuth.js認証
  - `/api/gmail/*` - Gmail連携・メール取得
  - `/api/projects/*` - 案件CRUD
  - `/api/engineers/*` - 人材CRUD
  - `/api/matching/*` - マッチング処理
  - `/api/ai-analysis/*` - AI解析処理

◦ **型安全性:** tRPCまたはZodによるエンドツーエンド型安全性

**成果物 (Deliverables):** API仕様書、型定義ファイル。

---

## ☁️ B. インフラ構築

### クラウド環境の初期設定

**目的 (Goal):** Vercelを中心とした開発・本番環境の構築。

**具体的な作業内容 (Specific Activities):**

◦ Vercelアカウント作成・プロジェクト設定
◦ GitHub連携による自動デプロイ設定
◦ 環境変数管理（開発・本番分離）

**成果物 (Deliverables):** 設定済みVercelプロジェクト。

### データベースの構築

**目的 (Goal):** PostgreSQLベースのマネージドDB環境構築。

**具体的な作業内容 (Specific Activities):**

◦ Vercel PostgresまたはSupabaseのセットアップ
◦ Prismaによるスキーマ定義・マイグレーション
◦ 接続プール設定・パフォーマンス最適化

**成果物 (Deliverables):** 稼働状態のデータベース、Prismaスキーマ。

### CI/CDパイプラインの構築

**目的 (Goal):** GitHub Actions + Vercelによる自動デプロイ。

**具体的な作業内容 (Specific Activities):**

◦ GitHub Actionsワークフロー設定
◦ 自動テスト・ビルド・デプロイ
◦ プレビュー環境の自動作成

**成果物 (Deliverables):** 自動化されたCI/CDパイプライン。

---

## ⚙️ C. バックエンド実装

### ユーザー認証・セッション管理

**目的 (Goal):** NextAuth.js + Google OAuthによるシンプル認証。

**具体的な作業内容 (Specific Activities):**

◦ NextAuth.js設定・Google OAuth連携
◦ セッション管理・JWT発行
◦ 認証済みユーザーのみアクセス可能なAPI保護

**成果物 (Deliverables):** Google認証機能、セッション管理システム。

### Gmail API連携・メール取得システム

**目的 (Goal):** 定期的なメール取得とAI解析の自動化。

**具体的な作業内容 (Specific Activities):**

◦ **Gmail API連携実装:**
  - OAuth 2.0による安全な認証
  - 過去30日間の初回データ取得
  - 10分間隔での新着メール取得

◦ **効率的なAPI利用:**
  - メールリスト取得 → AI判定 → 必要な本文のみ詳細取得
  - API制限対応（エクスポネンシャルバックオフ）
  - キューイングシステムによる負荷分散

**成果物 (Deliverables):** Gmail連携システム、定期バッチ処理。

### AI解析エンジン実装

**目的 (Goal):** LLMを活用した高精度なメール解析システム。

**具体的な作業内容 (Specific Activities):**

◦ **AI解析パイプライン:**
  - メール本文の前処理（HTMLタグ除去、署名削除）
  - LLM APIへの構造化プロンプト送信
  - JSON形式での解析結果取得・検証
  - データベースへの構造化データ保存

◦ **抽出対象データ:**
  ```json
  {
    "dataType": "案件" | "人材",
    "data": {
      "projectName": "string",
      "price": "number",
      "requiredSkills": ["string"],
      "workLocation": "string",
      "remote": "boolean",
      "startDate": "date"
    }
  }
  ```

**成果物 (Deliverables):** AI解析エンジン、プロンプトテンプレート。

### ルールベースマッチングエンジン実装

**目的 (Goal):** 案件と人材の適合度を数値化するマッチングシステム。

**具体的な作業内容 (Specific Activities):**

◦ **マッチングルール定義:**
  - 必須スキル完全一致: 50点
  - 経験年数適合: 20点
  - 単価レンジ適合: 15点
  - 勤務地・リモート適合: 15点

◦ **マッチング処理:**
  - 全組み合わせのスコア計算
  - 閾値（60点）以上の候補抽出
  - スコア順ソート・上位10件表示

**成果物 (Deliverables):** マッチングエンジン、スコア計算API。

---

## 💻 D. フロントエンド実装

### プロジェクトセットアップ・UI基盤構築

**目的 (Goal):** Next.js + TypeScript + Tailwind CSSによるモダンUI基盤。

**具体的な作業内容 (Specific Activities):**

◦ Next.js 14 (App Router) プロジェクト作成
◦ shadcn/ui + Tailwind CSSによるデザインシステム構築
◦ Zustand状態管理・React Hook Formセットアップ

**成果物 (Deliverables):** フロントエンド開発環境、共通UIコンポーネント。

### 主要画面UI実装

**目的 (Goal):** 直感的で効率的な業務画面の実装。

**具体的な作業内容 (Specific Activities):**

◦ **実装画面:**
  - ダッシュボード（統計・最新情報）
  - 案件・人材一覧（検索・フィルタ機能）
  - 詳細画面（AI解析結果表示）
  - マッチング結果画面（スコア表示）
  - データ修正フォーム（AI結果の手動修正）

◦ **レスポンシブ対応:** PC中心、タブレット対応

**成果物 (Deliverables):** 全主要画面のReactコンポーネント。

### データ手動修正・承認システム

**目的 (Goal):** AI解析結果の品質保証システム。

**具体的な作業内容 (Specific Activities):**

◦ AI解析結果の表示・編集フォーム
◦ バリデーション機能（必須項目チェック）
◦ 承認・却下機能（ワンクリック操作）
◦ 修正履歴の保存（将来のAI学習用）

**成果物 (Deliverables):** データ修正・承認UI、バリデーションシステム。

### API連携・状態管理

**目的 (Goal):** フロントエンドとバックエンドの seamless な統合。

**具体的な作業内容 (Specific Activities):**

◦ TanStack Query によるサーバー状態管理
◦ 楽観的更新によるUX向上
◦ エラーハンドリング・ローディング状態管理
◦ リアルタイム更新（必要に応じて）

**成果物 (Deliverables):** 完全統合されたフルスタックアプリケーション。

---

## ✅ E. テスト・リリース

### 単体・結合テスト

**目的 (Goal):** コア機能の品質保証。

**具体的な作業内容 (Specific Activities):**

◦ **重点テスト項目:**
  - Gmail API連携機能
  - AI解析ロジック
  - マッチングアルゴリズム
  - データ整合性

◦ Jest + React Testing Library によるテスト実装

**成果物 (Deliverables):** テストコード、カバレッジレポート。

### E2E（エンドツーエンド）テスト

**目的 (Goal):** ユーザーシナリオの動作確認。

**具体的な作業内容 (Specific Activities):**

◦ **主要シナリオ:**
  - ログイン → Gmail連携 → メール解析 → マッチング表示
  - データ修正 → 承認 → 結果反映

◦ Playwright によるブラウザテスト自動化

**成果物 (Deliverables):** E2Eテストシナリオ、自動テスト環境。

### リリース準備・デプロイ

**目的 (Goal):** 本番環境での安定稼働。

**具体的な作業内容 (Specific Activities):**

◦ 本番環境設定（環境変数、ドメイン設定）
◦ パフォーマンス最適化・セキュリティチェック
◦ Vercel本番デプロイ・動作確認
◦ 監視・アラート設定

**成果物 (Deliverables):** 本番環境で公開されたMVPアプリケーション。

---

*最終更新: 2024年12月*
*MVPスコープ: シンプル・高品質・AI活用*